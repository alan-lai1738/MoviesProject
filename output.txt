Sun Mar 14 01:33:06 PST 2021
Linux csslab9.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=930027(schau623) gid=2120930027(schau623) groups=2120930027(schau623),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
ERROR: Invalid Movie Type: Z
ERROR: Invalid Movie Type: Z
____________________[Viewing Inventory]____________________
[Annie Hall] Comedy | 1977 | By Woody Allen | 10 copies available / 0 copies currently being borrowed.
[Fargo] Comedy | 1996 | By Joel Coen | 10 copies available / 0 copies currently being borrowed.
[National Lampoon's Animal House] Comedy | 1978 | By John Landis | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2000 | By Different Years | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2003 | By Gore Verbinski | 10 copies available / 0 copies currently being borrowed.
[Sleepless in Seattle] Comedy | 1993 | By Nora Ephron | 10 copies available / 0 copies currently being borrowed.
[When Harry Met Sally] Comedy | 1989 | By Rob Reiner | 10 copies available / 0 copies currently being borrowed.
[You've Got Mail] Comedy | 1998 | By Nora Ephron | 10 copies available / 0 copies currently being borrowed.
[Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Same Director Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Unforgiven] Drama | 1992 | By Clint Eastwood | 10 copies available / 0 copies currently being borrowed.
[Good Will Hunting] Drama | 2000 | By Gus Van Sant | 10 copies available / 0 copies currently being borrowed.
[Silence of the Lambs] Drama | 1991 | By Jonathan Demme | 10 copies available / 0 copies currently being borrowed.
[Dogfight] Drama | 1991 | By Nancy Savoca | 10 copies available / 0 copies currently being borrowed.
[King of Hearts] Drama | 1967 | By Phillippe De Broca | 10 copies available / 0 copies currently being borrowed.
[Schindler's List] Drama | 1993 | By Steven Spielberg | 10 copies available / 0 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Cary Grant | 10 copies available / 0 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Clark Gable | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Vivien Leigh | 10 copies available / 0 copies currently being borrowed.
[The Wizard of Oz] Classic | 7/1939 | By Victor Fleming | Featuring Judy Garland | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Cary Grant | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[The Maltese Falcon] Classic | 10/1941 | By John Huston | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Ingrid Bergman | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring Donna Reed | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring James Steward | 10 copies available / 0 copies currently being borrowed.
[A Clockwork Orange] Classic | 2/1971 | By Stanley Kubrick | Featuring Malcolm McDowell | 10 copies available / 0 copies currently being borrowed.
[Harold and Maude] Classic | 3/1971 | By Hal Ashby | Featuring Ruth Gordon | 10 copies available / 0 copies currently being borrowed.
____________________[Displaying Mouse Minnie's History]____________________
History is Empty!
____________________[Displaying Frog Freddie's History]____________________
History is Empty!
____________________[Displaying Wacky Wally's History]____________________
History is Empty!
ERROR: Invalid Movie Type: Z
X is an invalid transaction type.
Z is an invalid transaction type.
ERROR: Invalid Customer ID: 1234
ERROR: Comedy Movie: Bogus Title, 2001 Not Found!
ERROR: Invalid Media Type:Z
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Insufficient stock of Harold and Maude, 3 1971
ERROR: Drama Movie: Bogus Title by Steven Spielberg Not Found!
____________________[Viewing Inventory]____________________
[Annie Hall] Comedy | 1977 | By Woody Allen | 9 copies available / 1 copies currently being borrowed.
[Fargo] Comedy | 1996 | By Joel Coen | 9 copies available / 1 copies currently being borrowed.
[National Lampoon's Animal House] Comedy | 1978 | By John Landis | 9 copies available / 1 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2000 | By Different Years | 10 copies available / 0 copies currently being borrowed.
[Pirates of the Caribbean] Comedy | 2003 | By Gore Verbinski | 10 copies available / 0 copies currently being borrowed.
[Sleepless in Seattle] Comedy | 1993 | By Nora Ephron | 9 copies available / 1 copies currently being borrowed.
[When Harry Met Sally] Comedy | 1989 | By Rob Reiner | 9 copies available / 1 copies currently being borrowed.
[You've Got Mail] Comedy | 1998 | By Nora Ephron | 9 copies available / 1 copies currently being borrowed.
[Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 9 copies available / 1 copies currently being borrowed.
[Same Director Good Morning Vietnam] Drama | 1988 | By Barry Levinson | 10 copies available / 0 copies currently being borrowed.
[Unforgiven] Drama | 1992 | By Clint Eastwood | 9 copies available / 1 copies currently being borrowed.
[Good Will Hunting] Drama | 2000 | By Gus Van Sant | 9 copies available / 1 copies currently being borrowed.
[Silence of the Lambs] Drama | 1991 | By Jonathan Demme | 9 copies available / 1 copies currently being borrowed.
[Dogfight] Drama | 1991 | By Nancy Savoca | 8 copies available / 2 copies currently being borrowed.
[King of Hearts] Drama | 1967 | By Phillippe De Broca | 9 copies available / 1 copies currently being borrowed.
[Schindler's List] Drama | 1993 | By Steven Spielberg | 9 copies available / 1 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Cary Grant | 9 copies available / 1 copies currently being borrowed.
[Holiday] Classic | 9/1938 | By George Cukor | Featuring Katherine Hepburn | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Clark Gable | 10 copies available / 0 copies currently being borrowed.
[Gone With the Wind] Classic | 2/1939 | By Victor Fleming | Featuring Vivien Leigh | 10 copies available / 0 copies currently being borrowed.
[The Wizard of Oz] Classic | 7/1939 | By Victor Fleming | Featuring Judy Garland | 10 copies available / 0 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Cary Grant | 9 copies available / 1 copies currently being borrowed.
[The Philadelphia Story] Classic | 5/1940 | By George Cukor | Featuring Katherine Hepburn | 9 copies available / 1 copies currently being borrowed.
[The Maltese Falcon] Classic | 10/1941 | By John Huston | Featuring Humphrey Bogart | 9 copies available / 1 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Humphrey Bogart | 10 copies available / 0 copies currently being borrowed.
[Casablanca] Classic | 8/1942 | By Michael Curtiz | Featuring Ingrid Bergman | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring Donna Reed | 10 copies available / 0 copies currently being borrowed.
[It's a Wonderful Life] Classic | 11/1946 | By Frank Capra | Featuring James Steward | 10 copies available / 0 copies currently being borrowed.
[A Clockwork Orange] Classic | 2/1971 | By Stanley Kubrick | Featuring Malcolm McDowell | 9 copies available / 1 copies currently being borrowed.
[Harold and Maude] Classic | 3/1971 | By Hal Ashby | Featuring Ruth Gordon | 0 copies available / 10 copies currently being borrowed.
____________________[Displaying Mouse Minnie's History]____________________
Mouse Minnie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Mouse Minnie borrowed 'The Philadelphia Story' which is a Classic movie by George Cukor

Mouse Minnie borrowed 'Good Will Hunting' which is a Classic movie by Gus Van Sant

Mouse Minnie borrowed 'The Philadelphia Story' which is a Classic movie by George Cukor

____________________[Displaying Mouse Mickey's History]____________________
Mouse Mickey borrowed 'Holiday' which is a Classic movie by George Cukor

Mouse Mickey borrowed 'The Maltese Falcon' which is a Classic movie by John Huston

Mouse Mickey borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

____________________[Displaying Frog Freddie's History]____________________
Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby

Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby

Frog Freddie borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Frog Freddie returned 'Harold and Maude' which is a Classic movie by Hal Ashby

____________________[Displaying Wacky Wally's History]____________________
Wacky Wally borrowed 'National Lampoon's Animal House' which is a Classic movie by John Landis

Wacky Wally borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Wacky Wally borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Wacky Wally returned 'You've Got Mail' which is a Comedy movie by Nora Ephron

____________________[Displaying Pig Porky's History]____________________
Pig Porky borrowed 'Harold and Maude' which is a Classic movie by Hal Ashby

Pig Porky borrowed 'Dogfight' which is a Classic movie by Nancy Savoca

Pig Porky borrowed 'Silence of the Lambs' which is a Classic movie by Jonathan Demme

Pig Porky borrowed 'When Harry Met Sally' which is a Classic movie by Rob Reiner

=====================================================
3. clang-tidy warnings are fixed
=====================================================
14729 warnings generated.
31478 warnings generated.
47958 warnings generated.
64869 warnings generated.
78872 warnings generated.
90851 warnings generated.
/home/NETID/schau623/2021wi343b-movie-schau623/Customer.cpp:9:11: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,-warnings-as-errors]
Customer::~Customer()
          ^
/home/NETID/schau623/2021wi343b-movie-schau623/Customer.cpp:70:10: error: implicit conversion 'typename iterator_traits<__normal_iterator<pair<char, int> *, vector<pair<char, int>, allocator<pair<char, int> > > > >::difference_type' (aka 'long') -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  return count(borrowedMovies.begin(), borrowedMovies.end(), make_pair(movieType, movieIndex));
         ^                                                                                    ~
                                                                                               != 0
/home/NETID/schau623/2021wi343b-movie-schau623/Customer.h:10:7: error: class 'Customer' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Customer
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.h:6:7: error: class 'Transaction' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Transaction
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:30:5: error: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,-warnings-as-errors]
    ClassicMovie(ClassicMovie* other)
    ^~~~~~~~~~~~
    explicit 
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:65:7: error: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,-warnings-as-errors]
      ClassicMovie* otherMovie = dynamic_cast<ClassicMovie*>(other);
      ^~~~~~~~~~~~~
      auto
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:106:9: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
        else if(m.getReleaseMonth() == releaseMonth)
        ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:112:11: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
          else if(m.getMajorActorFirst() == majorActorFirst)
          ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:118:13: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
            else
            ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:2:12: error: use '= default' to define a trivial default constructor [hicpp-use-equals-default,-warnings-as-errors]
Inventory::Inventory()
           ^
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:6:12: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,-warnings-as-errors]
Inventory::~Inventory()
           ^
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:13:3: error: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,-warnings-as-errors]
  DramaMovie* d = new DramaMovie(stock, title, director, releaseYear);
  ^~~~~~~~~~~
  auto
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:27:3: error: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto,-warnings-as-errors]
  ComedyMovie* f = new ComedyMovie(stock, title, director, releaseYear);
  ^~~~~~~~~~~~
  auto
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:41:3: error: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto,-warnings-as-errors]
  ClassicMovie* c = new ClassicMovie(stock, title, director, majActorFirstName, majActorLastName, relMonth, relYear);
  ^~~~~~~~~~~~~
  auto
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:134:5: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
    else
    ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:149:5: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
    else
    ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp:164:5: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
    else
    ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.h:12:7: error: class 'Inventory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Inventory
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Movie.h:10:7: error: constructor does not initialize these fields: stock, releaseYear, type [hicpp-member-init,-warnings-as-errors]
class Movie
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:30:5: error: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,-warnings-as-errors]
    ClassicMovie(ClassicMovie* other)
    ^~~~~~~~~~~~
    explicit 
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:65:7: error: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,-warnings-as-errors]
      ClassicMovie* otherMovie = dynamic_cast<ClassicMovie*>(other);
      ^~~~~~~~~~~~~
      auto
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:106:9: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
        else if(m.getReleaseMonth() == releaseMonth)
        ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:112:11: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
          else if(m.getMajorActorFirst() == majorActorFirst)
          ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:118:13: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
            else
            ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Customer.h:10:7: error: class 'Customer' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Customer
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:9:7: error: class 'HashTable' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class HashTable{
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:19:5: error: use '= default' to define a trivial default constructor [modernize-use-equals-default,-warnings-as-errors]
    HashTable()
    ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:22:5: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,-warnings-as-errors]
    ~HashTable()
    ^
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.h:12:7: error: class 'Inventory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Inventory
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Movie.h:10:7: error: constructor does not initialize these fields: stock, releaseYear, type [hicpp-member-init,-warnings-as-errors]
class Movie
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Store.h:5:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
#include "Movie.h"
^        ~~~~~~~~~
         "Inventory.h"
/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.h:6:7: error: class 'Transaction' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Transaction
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:30:5: error: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor,-warnings-as-errors]
    ClassicMovie(ClassicMovie* other)
    ^~~~~~~~~~~~
    explicit 
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:65:7: error: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,-warnings-as-errors]
      ClassicMovie* otherMovie = dynamic_cast<ClassicMovie*>(other);
      ^~~~~~~~~~~~~
      auto
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:106:9: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
        else if(m.getReleaseMonth() == releaseMonth)
        ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:112:11: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
          else if(m.getMajorActorFirst() == majorActorFirst)
          ^~~~~~~
/home/NETID/schau623/2021wi343b-movie-schau623/ClassicMovie.h:118:13: error: do not use 'else' after 'return' [readability-else-after-return,-warnings-as-errors]
            else
            ^~~~
/home/NETID/schau623/2021wi343b-movie-schau623/Customer.h:10:7: error: class 'Customer' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions,-warnings-as-errors]
class Customer
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:9:7: error: class 'HashTable' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions,-warnings-as-errors]
class HashTable{
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:19:5: error: use '= default' to define a trivial default constructor [modernize-use-equals-default,-warnings-as-errors]
    HashTable()
    ^
/home/NETID/schau623/2021wi343b-movie-schau623/HashTable.h:22:5: error: use '= default' to define a trivial destructor [modernize-use-equals-default,-warnings-as-errors]
    ~HashTable()
    ^
/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.h:12:7: error: class 'Inventory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Inventory
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Movie.h:10:7: error: constructor does not initialize these fields: stock, releaseYear, type [hicpp-member-init,-warnings-as-errors]
class Movie
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/Store.cpp:181:11: error: different indentation for 'if' and corresponding 'else' [readability-misleading-indentation,-warnings-as-errors]
          else if(movieType == "F")
          ^
/home/NETID/schau623/2021wi343b-movie-schau623/Store.cpp:226:11: error: different indentation for 'if' and corresponding 'else' [readability-misleading-indentation,-warnings-as-errors]
          else if(movieType == "D")
          ^
/home/NETID/schau623/2021wi343b-movie-schau623/Store.h:5:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
#include "Movie.h"
^        ~~~~~~~~~
         "Inventory.h"
/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.h:6:7: error: class 'Transaction' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,-warnings-as-errors]
class Transaction
      ^
/home/NETID/schau623/2021wi343b-movie-schau623/store_test.cpp:8:1: error: #includes are not sorted properly [llvm-include-order,-warnings-as-errors]
#include <iostream>
^        ~~~~~~~~~~
         <cassert>
/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.cpp:34:14: error: use '= default' to define a trivial destructor [hicpp-use-equals-default,-warnings-as-errors]
Transaction::~Transaction()
             ^
/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.h:6:7: error: class 'Transaction' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions,-warnings-as-errors]
class Transaction
      ^
Suppressed 90769 warnings (90769 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
50 warnings treated as errors
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./Customer.cpp
3,4c3
< Customer::Customer(string first, string last, int id)
< {
---
> Customer::Customer(string first, string last, int id) {
9,16c8,9
< Customer::~Customer()
< {
<   
< }
< void Customer::addToHistory(Transaction* t)
< {
<   history.push_back(t);
< }
---
> Customer::~Customer() {}
> void Customer::addToHistory(Transaction *t) { history.push_back(t); }
18,21c11
< string Customer::getFirstName() const
< {
<   return customerFirstName;
< }
---
> string Customer::getFirstName() const { return customerFirstName; }
23,26c13
< string Customer::getLastName() const
< {
<   return customerSecondName;
< }
---
> string Customer::getLastName() const { return customerSecondName; }
28,31c15
< int Customer::getCustomerID() const
< {
<   return customerID;
< }
---
> int Customer::getCustomerID() const { return customerID; }
33,38c17,21
< void Customer::printHistory()
< {
<   
<   cout << "____________________[Displaying " << customerFirstName << " " << customerSecondName << "'s History]____________________" << endl;
<   if(history.empty())
<   {
---
> void Customer::printHistory() {
> 
>   cout << "____________________[Displaying " << customerFirstName << " "
>        << customerSecondName << "'s History]____________________" << endl;
>   if (history.empty()) {
40,45c23,25
<   }
<   else 
<   {
<     for(int i = history.size()-1; i > 0; i--)
<     {
<       cout <<  *history[i] << endl;
---
>   } else {
>     for (int i = history.size() - 1; i > 0; i--) {
>       cout << *history[i] << endl;
50,51c30
< void Customer::addBorrowed(char movieType, int movieIndex)
< {
---
> void Customer::addBorrowed(char movieType, int movieIndex) {
55,61c34,38
< void Customer::returnADVD(char movieType, int movieIndex)
< {
<   for(int i = 0; i < borrowedMovies.size(); i++)
<   {
<     if(borrowedMovies[i].first == movieType && borrowedMovies[i].second == movieIndex)
<     {
<       borrowedMovies.erase(borrowedMovies.begin()+i);
---
> void Customer::returnADVD(char movieType, int movieIndex) {
>   for (int i = 0; i < borrowedMovies.size(); i++) {
>     if (borrowedMovies[i].first == movieType &&
>         borrowedMovies[i].second == movieIndex) {
>       borrowedMovies.erase(borrowedMovies.begin() + i);
65,66c42
<  }
< 
---
> }
68,70c44,46
< bool Customer::isCurrentlyBorrowing(char movieType, int movieIndex)
< {
<   return count(borrowedMovies.begin(), borrowedMovies.end(), make_pair(movieType, movieIndex));
---
> bool Customer::isCurrentlyBorrowing(char movieType, int movieIndex) {
>   return count(borrowedMovies.begin(), borrowedMovies.end(),
>                make_pair(movieType, movieIndex));
Running clang-format on ./Inventory.cpp
2,18c2,10
< Inventory::Inventory()
< {
< 
< }
< Inventory::~Inventory()
< {
<   
< }
< //Add movie methods
< void Inventory::addDramaMovie(const int& stock, const string& title, const string& director, const int& releaseYear)
< { 
<   DramaMovie* d = new DramaMovie(stock, title, director, releaseYear);
<   for (auto & i : dramaMovieShelf)
<   {
<     if(d->equals(i))
<     {
<       i->setStock(d->getStockAmt()+i->getStockAmt());
---
> Inventory::Inventory() {}
> Inventory::~Inventory() {}
> // Add movie methods
> void Inventory::addDramaMovie(const int &stock, const string &title,
>                               const string &director, const int &releaseYear) {
>   DramaMovie *d = new DramaMovie(stock, title, director, releaseYear);
>   for (auto &i : dramaMovieShelf) {
>     if (d->equals(i)) {
>       i->setStock(d->getStockAmt() + i->getStockAmt());
25,32c17,22
< void Inventory::addComedyMovie(const int& stock, const string& title, const string& director, const int& releaseYear)
< {
<   ComedyMovie* f = new ComedyMovie(stock, title, director, releaseYear);
<   for(auto & i : comedyMovieShelf)
<   {
<     if(f->equals(i))
<     {
<       i->setStock(f->getStockAmt()+i->getStockAmt());
---
> void Inventory::addComedyMovie(const int &stock, const string &title,
>                                const string &director, const int &releaseYear) {
>   ComedyMovie *f = new ComedyMovie(stock, title, director, releaseYear);
>   for (auto &i : comedyMovieShelf) {
>     if (f->equals(i)) {
>       i->setStock(f->getStockAmt() + i->getStockAmt());
39,46c29,38
< void Inventory::addClassicMovie(const int& stock, const string& title, const string& director, const string& majActorFirstName, const string& majActorLastName, const int& relMonth, const int& relYear)
< {
<   ClassicMovie* c = new ClassicMovie(stock, title, director, majActorFirstName, majActorLastName, relMonth, relYear);
<   for(auto & i : classicMovieShelf)
<   {
<     if(c->equals(i))
<     {
<       i->setStock(c->getStockAmt()+i->getStockAmt());
---
> void Inventory::addClassicMovie(const int &stock, const string &title,
>                                 const string &director,
>                                 const string &majActorFirstName,
>                                 const string &majActorLastName,
>                                 const int &relMonth, const int &relYear) {
>   ClassicMovie *c = new ClassicMovie(stock, title, director, majActorFirstName,
>                                      majActorLastName, relMonth, relYear);
>   for (auto &i : classicMovieShelf) {
>     if (c->equals(i)) {
>       i->setStock(c->getStockAmt() + i->getStockAmt());
53,57c45,47
< //Getters
< ClassicMovie* Inventory::peekClassicMovie(const int& index) const
< {
<   if(index >= classicMovieShelf.size() || index < 0)
<   {
---
> // Getters
> ClassicMovie *Inventory::peekClassicMovie(const int &index) const {
>   if (index >= classicMovieShelf.size() || index < 0) {
64,67c54,55
< ComedyMovie* Inventory::peekComedyMovie(const int& index) const
< {
<   if(index >= comedyMovieShelf.size() || index < 0)
<   {
---
> ComedyMovie *Inventory::peekComedyMovie(const int &index) const {
>   if (index >= comedyMovieShelf.size() || index < 0) {
74,77c62,63
< DramaMovie* Inventory::peekDramaMovie(const int& index) const
< {
<   if(index >= dramaMovieShelf.size() || index < 0)
<   {
---
> DramaMovie *Inventory::peekDramaMovie(const int &index) const {
>   if (index >= dramaMovieShelf.size() || index < 0) {
84,92c70,76
< int Inventory::getClassicIndex(const int& month, const int& year, const string& first, const string& last)
< {
<   for(int i = 0; i < classicMovieShelf.size(); i++)
<   {
<     if(classicMovieShelf[i]->getReleaseMonth() == month
<     && classicMovieShelf[i]->getReleaseYear() == year
<     && classicMovieShelf[i]->getMajorActorFirst() == first
<     && classicMovieShelf[i]->getMajorActorLast() == last)
<     {
---
> int Inventory::getClassicIndex(const int &month, const int &year,
>                                const string &first, const string &last) {
>   for (int i = 0; i < classicMovieShelf.size(); i++) {
>     if (classicMovieShelf[i]->getReleaseMonth() == month &&
>         classicMovieShelf[i]->getReleaseYear() == year &&
>         classicMovieShelf[i]->getMajorActorFirst() == first &&
>         classicMovieShelf[i]->getMajorActorLast() == last) {
99,104c83,86
< int Inventory::getComedyIndex(const int& year, const string& title)
< {
<   for(int i = 0; i < comedyMovieShelf.size(); i++)
<   {
<     if(comedyMovieShelf[i]->getReleaseYear() == year && comedyMovieShelf[i]->getTitle() == title)
<     {
---
> int Inventory::getComedyIndex(const int &year, const string &title) {
>   for (int i = 0; i < comedyMovieShelf.size(); i++) {
>     if (comedyMovieShelf[i]->getReleaseYear() == year &&
>         comedyMovieShelf[i]->getTitle() == title) {
111,116c93,96
< int Inventory::getDramaIndex(const string& director, const string& title)
< {
<   for(int i = 0; i < dramaMovieShelf.size(); i++)
<   {
<     if(dramaMovieShelf[i]->getDirector() == director && dramaMovieShelf[i]->getTitle() == title)
<     {
---
> int Inventory::getDramaIndex(const string &director, const string &title) {
>   for (int i = 0; i < dramaMovieShelf.size(); i++) {
>     if (dramaMovieShelf[i]->getDirector() == director &&
>         dramaMovieShelf[i]->getTitle() == title) {
123,126c103,104
< bool Inventory::borrowMovie(const string& movieType, const int& index)
< {
<   if(movieType == "C")
<   {
---
> bool Inventory::borrowMovie(const string &movieType, const int &index) {
>   if (movieType == "C") {
128,131c106,110
<     if(stockAmt >= 1)
<     {
<       classicMovieShelf[index]->setStock(classicMovieShelf[index]->getStockAmt()-1);
<       classicMovieShelf[index]->setBorrowed(classicMovieShelf[index]->getBorrowedAmt()+1);
---
>     if (stockAmt >= 1) {
>       classicMovieShelf[index]->setStock(
>           classicMovieShelf[index]->getStockAmt() - 1);
>       classicMovieShelf[index]->setBorrowed(
>           classicMovieShelf[index]->getBorrowedAmt() + 1);
133,136c112,116
<     }
<     else
<     {
<       cerr << "ERROR: Insufficient stock of " << classicMovieShelf[index]->getTitle() << ", " << classicMovieShelf[index]->getReleaseMonth() << " " << classicMovieShelf[index]->getReleaseYear() << endl;
---
>     } else {
>       cerr << "ERROR: Insufficient stock of "
>            << classicMovieShelf[index]->getTitle() << ", "
>            << classicMovieShelf[index]->getReleaseMonth() << " "
>            << classicMovieShelf[index]->getReleaseYear() << endl;
139,141c119
<   }
<   else if(movieType == "F")
<   {
---
>   } else if (movieType == "F") {
143,146c121,125
<     if(stockAmt >= 1)
<     {
<       comedyMovieShelf[index]->setStock(comedyMovieShelf[index]->getStockAmt()-1);
<       comedyMovieShelf[index]->setBorrowed(comedyMovieShelf[index]->getBorrowedAmt()+1);
---
>     if (stockAmt >= 1) {
>       comedyMovieShelf[index]->setStock(comedyMovieShelf[index]->getStockAmt() -
>                                         1);
>       comedyMovieShelf[index]->setBorrowed(
>           comedyMovieShelf[index]->getBorrowedAmt() + 1);
148,151c127,130
<     }
<     else
<     {
<       cerr << "ERROR: Insufficient stock of " << comedyMovieShelf[index]->getTitle() << ", " << comedyMovieShelf[index]->getReleaseYear() << endl;
---
>     } else {
>       cerr << "ERROR: Insufficient stock of "
>            << comedyMovieShelf[index]->getTitle() << ", "
>            << comedyMovieShelf[index]->getReleaseYear() << endl;
154,156c133
<   }
<   else if(movieType == "D")
<   {
---
>   } else if (movieType == "D") {
158,161c135,139
<     if(stockAmt >= 1)
<     {
<       dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt()-1);
<       dramaMovieShelf[index]->setBorrowed(dramaMovieShelf[index]->getBorrowedAmt()+1);
---
>     if (stockAmt >= 1) {
>       dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt() -
>                                        1);
>       dramaMovieShelf[index]->setBorrowed(
>           dramaMovieShelf[index]->getBorrowedAmt() + 1);
163,166c141,144
<     }
<     else
<     {
<       cerr << "ERROR: Insufficient stock of " << dramaMovieShelf[index]->getTitle() << ", " << dramaMovieShelf[index]->getReleaseYear() << endl;
---
>     } else {
>       cerr << "ERROR: Insufficient stock of "
>            << dramaMovieShelf[index]->getTitle() << ", "
>            << dramaMovieShelf[index]->getReleaseYear() << endl;
173,188c151,167
< void Inventory::returnMovie(const string& movieType, const int& index)
< {
<   if(movieType == "C")
<   {
<     classicMovieShelf[index]->setStock(classicMovieShelf[index]->getStockAmt()+1);
<     classicMovieShelf[index]->setBorrowed(classicMovieShelf[index]->getBorrowedAmt()-1);
<   }
<   if(movieType == "F")
<   {
<     comedyMovieShelf[index]->setStock(comedyMovieShelf[index]->getStockAmt()+1);
<     comedyMovieShelf[index]->setBorrowed(comedyMovieShelf[index]->getBorrowedAmt()-1);
<   }
<   if(movieType == "D")
<   {
<     dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt()+1);
<     dramaMovieShelf[index]->setBorrowed(dramaMovieShelf[index]->getBorrowedAmt()-1);
---
> void Inventory::returnMovie(const string &movieType, const int &index) {
>   if (movieType == "C") {
>     classicMovieShelf[index]->setStock(classicMovieShelf[index]->getStockAmt() +
>                                        1);
>     classicMovieShelf[index]->setBorrowed(
>         classicMovieShelf[index]->getBorrowedAmt() - 1);
>   }
>   if (movieType == "F") {
>     comedyMovieShelf[index]->setStock(comedyMovieShelf[index]->getStockAmt() +
>                                       1);
>     comedyMovieShelf[index]->setBorrowed(
>         comedyMovieShelf[index]->getBorrowedAmt() - 1);
>   }
>   if (movieType == "D") {
>     dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt() + 1);
>     dramaMovieShelf[index]->setBorrowed(
>         dramaMovieShelf[index]->getBorrowedAmt() - 1);
192,194c171
< 
< bool Inventory::sortByDrama(DramaMovie* a, DramaMovie* b)
< {
---
> bool Inventory::sortByDrama(DramaMovie *a, DramaMovie *b) {
198,199c175
< bool Inventory::sortByComedy(ComedyMovie* a, ComedyMovie* b)
< {
---
> bool Inventory::sortByComedy(ComedyMovie *a, ComedyMovie *b) {
203,204c179
< bool Inventory::sortByClassic(ClassicMovie* a, ClassicMovie* b)
< {
---
> bool Inventory::sortByClassic(ClassicMovie *a, ClassicMovie *b) {
208,209c183
< void Inventory::sortMovies()
< {
---
> void Inventory::sortMovies() {
213d186
< 
215d187
< 
Running clang-format on ./main.cpp
18c18
< //void testAll();
---
> // void testAll();
22,23c22,23
< Store s;
< s.fillCustomerDatabase("data4customers.txt");
---
>   Store s;
>   s.fillCustomerDatabase("data4customers.txt");
26c26
<  //s.fillCustomerDatabase("AlanCustomers.txt");
---
>   // s.fillCustomerDatabase("AlanCustomers.txt");
29,30d28
<   
<  
32,37c30,35
<  /* Store s;
<   s.fillCustomerDatabase("AlanCustomers.txt");
<   s.stockDVDShelves("AlanMovies.txt");
<   s.readTransactions("AlanCommands.txt");
<   s.displayInventory();
<   */
---
>   /* Store s;
>    s.fillCustomerDatabase("AlanCustomers.txt");
>    s.stockDVDShelves("AlanMovies.txt");
>    s.readTransactions("AlanCommands.txt");
>    s.displayInventory();
>    */
41,43d38
< 
< 
< 
48c43
<   
---
> 
51c46,47
<   //ClassicMovie: (int stock, string title, string director, string majActorFirstName, string majActorLastName, int relMonth, int relYear;)
---
>   //ClassicMovie: (int stock, string title, string director, string
>  majActorFirstName, string majActorLastName, int relMonth, int relYear;)
53c49,50
<   ClassicMovie classic2(13255, "YuruCamp2", "Aoi Inuyama", "Aoi", "Inuyama", 3, 2017);
---
>   ClassicMovie classic2(13255, "YuruCamp2", "Aoi Inuyama", "Aoi", "Inuyama", 3,
>  2017);
62c59
<   
---
> 
65,86c62,83
<   /*ComedyMovie ourMovie2(20, "MovieTitle", "Steven Hoc Chau", 1999);
<   //BSTree<Movie> comedyTree;
<   //comedyTree.insert(&ourMovie2);
<   // comedyTree.printTree();
< 
<   Transaction t('C', "Yuru Camp", "Rin Shima", "Hubby", 'B');
<   cout << t << endl;
< 
<   Customer c("Hubby", "Bubby", 1234);
<   c.addToHistory(t);
<   c.printHistory();
<   int one = 1;
<   string rin = "rin";
<   HashTable<int, string> h;
<   h.put(one, rin);
<   int two = 2;
<   int three = 3;
<   string b = "nadeshiko";
<   string d  ="aoi";
<   h.put(two, b);
<   h.put(three, d);
<   h.put(two, d);
---
> /*ComedyMovie ourMovie2(20, "MovieTitle", "Steven Hoc Chau", 1999);
> //BSTree<Movie> comedyTree;
> //comedyTree.insert(&ourMovie2);
> // comedyTree.printTree();
> 
> Transaction t('C', "Yuru Camp", "Rin Shima", "Hubby", 'B');
> cout << t << endl;
> 
> Customer c("Hubby", "Bubby", 1234);
> c.addToHistory(t);
> c.printHistory();
> int one = 1;
> string rin = "rin";
> HashTable<int, string> h;
> h.put(one, rin);
> int two = 2;
> int three = 3;
> string b = "nadeshiko";
> string d  ="aoi";
> h.put(two, b);
> h.put(three, d);
> h.put(two, d);
88c85
<   cout << h;
---
> cout << h;
90,92c87,89
<   Store s;
<   s.fillCustomerDatabase("data4customers.txt");
<   s.stockDVDShelves("data4movies.txt");*/
\ No newline at end of file
---
> Store s;
> s.fillCustomerDatabase("data4customers.txt");
> s.stockDVDShelves("data4movies.txt");*/
\ No newline at end of file
Running clang-format on ./Store.cpp
1,2c1,2
<  #include "Store.h"
<  #include <fstream>
---
> #include "Store.h"
> #include <fstream>
7,10c7
< Store::Store()
< {
<   inv = new Inventory();
< }
---
> Store::Store() { inv = new Inventory(); }
12,13c9
< void Store::fillCustomerDatabase(const string& fileName)
< {
---
> void Store::fillCustomerDatabase(const string &fileName) {
15,19c11,14
< 	string line;	// Line were reading
< 	if (!in)
< 	{
< 		cout << "Can't open file" << endl;
< 	}
---
>   string line; // Line were reading
>   if (!in) {
>     cout << "Can't open file" << endl;
>   }
21,28c16,21
< 	while (!in.eof())
< 	{
< 		getline(in, line);
< 		if (line.empty())
< 		{
< 			break;
< 		}
< 		istringstream parseLine(line);
---
>   while (!in.eof()) {
>     getline(in, line);
>     if (line.empty()) {
>       break;
>     }
>     istringstream parseLine(line);
33c26
<     Customer* c = new Customer(first, last, custID);
---
>     Customer *c = new Customer(first, last, custID);
35c28
< 	}
---
>   }
39,40c32
< void Store::stockDVDShelves(const string& fileName)
< {
---
> void Store::stockDVDShelves(const string &fileName) {
42,46c34,37
< 	string line;	// Line were reading
< 	if (!in)
< 	{
< 		cout << "Can't open file" << endl;
< 	}
---
>   string line; // Line were reading
>   if (!in) {
>     cout << "Can't open file" << endl;
>   }
48,55c39,44
< 	while (!in.eof())
< 	{
< 		getline(in, line);
< 		if (line.empty())
< 		{
< 			break;
< 		}
< 		istringstream parseLine(line);
---
>   while (!in.eof()) {
>     getline(in, line);
>     if (line.empty()) {
>       break;
>     }
>     istringstream parseLine(line);
58,59c47,48
<     while(getline(parseLine, token, ',')) {
<       if(token[0] == ' ') // Remove beginning space.
---
>     while (getline(parseLine, token, ',')) {
>       if (token[0] == ' ') // Remove beginning space.
66,67c55
<     if(movieType == "C")
<     {
---
>     if (movieType == "C") {
74,77c62,64
<       inv->addClassicMovie(stock, title, dir, firstName, lastName, stoi(month), stoi(year));
<     }
<     else if(movieType == "F" || movieType == "D")
<     {
---
>       inv->addClassicMovie(stock, title, dir, firstName, lastName, stoi(month),
>                            stoi(year));
>     } else if (movieType == "F" || movieType == "D") {
82,88c69,72
<       if(movieType == "F")
<       {
<        inv->addComedyMovie(stock, title, dir, year);
<       }
<       else
<       {
<        inv->addDramaMovie(stock, title, dir, year);
---
>       if (movieType == "F") {
>         inv->addComedyMovie(stock, title, dir, year);
>       } else {
>         inv->addDramaMovie(stock, title, dir, year);
90,92c74
<     }
<     else
<     {
---
>     } else {
95,97c77
< 
< 	}
<   
---
>   }
100,101c80
< void Store::readTransactions(const string& fileName)
< {
---
> void Store::readTransactions(const string &fileName) {
103,114c82,90
< 	string line;	// Line were reading
< 	if (!in)
< 	{
< 		cout << "Can't open file" << endl;
< 	}
< 	while (!in.eof())
< 	{
< 		getline(in, line);
< 		if (line.empty())
< 		{
< 			break;
< 		}
---
>   string line; // Line were reading
>   if (!in) {
>     cout << "Can't open file" << endl;
>   }
>   while (!in.eof()) {
>     getline(in, line);
>     if (line.empty()) {
>       break;
>     }
119,122c95,96
<     switch(transType[0])
<     {
<     case 'I':
<     {
---
>     switch (transType[0]) {
>     case 'I': {
126,127c100
<     case 'H':
<     {
---
>     case 'H': {
131c104
<       break; 
---
>       break;
133,134c106
<     case 'R':
<     {
---
>     case 'R': {
139,140c111
<       if(mediaType == "D")
<       {
---
>       if (mediaType == "D") {
142,143c113
<         if(movieType == "C")
<         {
---
>         if (movieType == "C") {
152c122
<           if(idx == -1) // If Classic movie doesn't exist, error
---
>           if (idx == -1) // If Classic movie doesn't exist, error
155,156c125
<           }
<           else // Otherwise, movie exists
---
>           } else // Otherwise, movie exists
158,177c127,147
<               ClassicMovie* c = inv->peekClassicMovie(idx);
<               if(customerDatabase.contains(custID)) // If Customer exists, continue
<               {
<                 //check
<                 if(customerDatabase.get(custID)->isCurrentlyBorrowing('C', idx))
<                 {
<                   inv->returnMovie(movieType, idx);
<                   Transaction* t = new Transaction('C', c->getTitle(), c->getDirector(), customerDatabase.get(custID)->getFirstName() + " "
<                   + customerDatabase.get(custID)->getLastName(), transType[0]);
<                   customerDatabase.get(custID)->addToHistory(t);
<                 }
<                 else
<                 {
<                   cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
<                   << " is not currently borrowing the classic movie " << c->getTitle() << ", " << c->getDirector() << ", so we can't return it." << endl;
<                 }
<               }
<               else  // Otherwise, the customer doesn't exist. Throw an error. 
<               {
<                 cerr << "ERROR: Invalid Customer ID: " << custID << endl;
---
>             ClassicMovie *c = inv->peekClassicMovie(idx);
>             if (customerDatabase.contains(
>                     custID)) // If Customer exists, continue
>             {
>               // check
>               if (customerDatabase.get(custID)->isCurrentlyBorrowing('C',
>                                                                      idx)) {
>                 inv->returnMovie(movieType, idx);
>                 Transaction *t = new Transaction(
>                     'C', c->getTitle(), c->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
>                 customerDatabase.get(custID)->addToHistory(t);
>               } else {
>                 cerr << "ERROR: "
>                      << customerDatabase.get(custID)->getFirstName() << " "
>                      << customerDatabase.get(custID)->getLastName()
>                      << " is not currently borrowing the classic movie "
>                      << c->getTitle() << ", " << c->getDirector()
>                      << ", so we can't return it." << endl;
178a149,151
>             } else // Otherwise, the customer doesn't exist. Throw an error.
>             {
>               cerr << "ERROR: Invalid Customer ID: " << custID << endl;
181,198c154,161
<           else if(movieType == "F")
<           {
<             //F You've Got Mail, 1998
<             int year;
<             string title;
<             string token;
<             vector<string> tokens;
<             while(getline(parseLine, token, ',')) {
<               if(token[0] == ' ') // Remove beginning space.
<               {
<                 token.erase(0, 1);
<               }
<               tokens.push_back(token);
<             }
<             title = tokens[0];
<             year = stoi(tokens[1]);
<             int idx = inv->getComedyIndex(year, title);
<             if(idx == -1)
---
>         } else if (movieType == "F") {
>           // F You've Got Mail, 1998
>           int year;
>           string title;
>           string token;
>           vector<string> tokens;
>           while (getline(parseLine, token, ',')) {
>             if (token[0] == ' ') // Remove beginning space.
200c163
<               cerr << "ERROR: Comedy Movie: " << title << ", " << year << " Not Found!" << endl;
---
>               token.erase(0, 1);
202,210c165,187
<             else
<             {
<               ComedyMovie* c = inv->peekComedyMovie(idx);
<               if(customerDatabase.contains(custID)) // if customer exists, continue
<               {
<                 if(customerDatabase.get(custID)->isCurrentlyBorrowing('F', idx)) // if customer is borrowing this movie, we can successfully return it
<                 {
<                   inv->returnMovie(movieType, idx);
<                   Transaction* t = new Transaction('F', c->getTitle(), c->getDirector(), customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
---
>             tokens.push_back(token);
>           }
>           title = tokens[0];
>           year = stoi(tokens[1]);
>           int idx = inv->getComedyIndex(year, title);
>           if (idx == -1) {
>             cerr << "ERROR: Comedy Movie: " << title << ", " << year
>                  << " Not Found!" << endl;
>           } else {
>             ComedyMovie *c = inv->peekComedyMovie(idx);
>             if (customerDatabase.contains(
>                     custID)) // if customer exists, continue
>             {
>               if (customerDatabase.get(custID)->isCurrentlyBorrowing(
>                       'F', idx)) // if customer is borrowing this movie, we can
>                                  // successfully return it
>               {
>                 inv->returnMovie(movieType, idx);
>                 Transaction *t = new Transaction(
>                     'F', c->getTitle(), c->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
212,222c189,196
<                   customerDatabase.get(custID)->addToHistory(t);
<                 } 
<                 else
<                 {
<                   cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
<                   << " is not currently borrowing the comedy movie " << c->getTitle() << ", " << c->getDirector() << ", so we can't return it." << endl;
<                 }
<               }
<               else // otherwise error for non-existent ID.
<               {
<                 cerr << "ERROR: Invalid Customer ID: " << custID << endl;
---
>                 customerDatabase.get(custID)->addToHistory(t);
>               } else {
>                 cerr << "ERROR: "
>                      << customerDatabase.get(custID)->getFirstName() << " "
>                      << customerDatabase.get(custID)->getLastName()
>                      << " is not currently borrowing the comedy movie "
>                      << c->getTitle() << ", " << c->getDirector()
>                      << ", so we can't return it." << endl;
223a198,200
>             } else // otherwise error for non-existent ID.
>             {
>               cerr << "ERROR: Invalid Customer ID: " << custID << endl;
226,242c203,209
<           else if(movieType == "D")
<           {
<             //D Barry Levinson, Good Morning Vietnam,
<             string director, title;
<             string token;
<             vector<string> tokens;
<             while(getline(parseLine, token, ',')) {
<               if(token[0] == ' ') // Remove beginning space.
<               {
<                 token.erase(0, 1);
<               }
<               tokens.push_back(token);
<             }
<             director = tokens[0];
<             title = tokens[1];
<             int idx = inv->getDramaIndex(director, title);
<             if(idx == -1) // If movie not found throw error
---
>         } else if (movieType == "D") {
>           // D Barry Levinson, Good Morning Vietnam,
>           string director, title;
>           string token;
>           vector<string> tokens;
>           while (getline(parseLine, token, ',')) {
>             if (token[0] == ' ') // Remove beginning space.
244c211
<               cerr << "ERROR: Drama Movie: " << title << " by " << director << " Not Found!" << endl;
---
>               token.erase(0, 1);
246,254c213,235
<             else  // Otherwise movie exists, continue
<             {
<               DramaMovie* d = inv->peekDramaMovie(idx);
<               if(customerDatabase.contains(custID)) // if customer exists, continue
<               {
<                 if(customerDatabase.get(custID)->isCurrentlyBorrowing('D', idx))
<                 {
<                   inv->returnMovie(movieType, idx);
<                   Transaction* t = new Transaction('D', d->getTitle(), d->getDirector(), customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
---
>             tokens.push_back(token);
>           }
>           director = tokens[0];
>           title = tokens[1];
>           int idx = inv->getDramaIndex(director, title);
>           if (idx == -1) // If movie not found throw error
>           {
>             cerr << "ERROR: Drama Movie: " << title << " by " << director
>                  << " Not Found!" << endl;
>           } else // Otherwise movie exists, continue
>           {
>             DramaMovie *d = inv->peekDramaMovie(idx);
>             if (customerDatabase.contains(
>                     custID)) // if customer exists, continue
>             {
>               if (customerDatabase.get(custID)->isCurrentlyBorrowing('D',
>                                                                      idx)) {
>                 inv->returnMovie(movieType, idx);
>                 Transaction *t = new Transaction(
>                     'D', d->getTitle(), d->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
256,266c237,244
<                   customerDatabase.get(custID)->addToHistory(t);
<                 }
<                 else
<                 {
<                   cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
<                   << " is not currently borrowing the drama movie " << d->getTitle() << ", " << d->getDirector() << ", so we can't return it." << endl;
<                 }
<               }
<               else // throw error for non existing customer
<               {
<                 cerr << "ERROR: Invalid Customer ID: " << custID << endl;
---
>                 customerDatabase.get(custID)->addToHistory(t);
>               } else {
>                 cerr << "ERROR: "
>                      << customerDatabase.get(custID)->getFirstName() << " "
>                      << customerDatabase.get(custID)->getLastName()
>                      << " is not currently borrowing the drama movie "
>                      << d->getTitle() << ", " << d->getDirector()
>                      << ", so we can't return it." << endl;
267a246,248
>             } else // throw error for non existing customer
>             {
>               cerr << "ERROR: Invalid Customer ID: " << custID << endl;
269,271c250,251
<         }
<         else
<         {
---
>           }
>         } else {
273,276c253,255
<         }  
<       }// if media type is d
<       else
<       {
---
>         }
>       } // if media type is d
>       else {
278c257
<       }  
---
>       }
281,282c260
<     case 'B':
<     {
---
>     case 'B': {
287,288c265
<       if(mediaType == "D")
<       {
---
>       if (mediaType == "D") {
290,291c267
<         if(movieType == "C")
<         {
---
>         if (movieType == "C") {
300,301c276
<           if(idx == -1)
<           {
---
>           if (idx == -1) {
303,311c278,286
<           }
<           else
<           {
<             if(customerDatabase.contains(custID))
<             {
<               if(inv->borrowMovie(movieType, idx))
<               {
<                 ClassicMovie* c = inv->peekClassicMovie(idx);
<                 Transaction* t = new Transaction('C', c->getTitle(), c->getDirector(),customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
---
>           } else {
>             if (customerDatabase.contains(custID)) {
>               if (inv->borrowMovie(movieType, idx)) {
>                 ClassicMovie *c = inv->peekClassicMovie(idx);
>                 Transaction *t = new Transaction(
>                     'C', c->getTitle(), c->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
315,317c290
<             }
<             else 
<             {
---
>             } else {
321,324c294,295
<         }
<         else if(movieType == "F")
<         {
<           //F You've Got Mail, 1998
---
>         } else if (movieType == "F") {
>           // F You've Got Mail, 1998
329,330c300,301
<           while(getline(parseLine, token, ',')) {
<             if(token[0] == ' ') // Remove beginning space.
---
>           while (getline(parseLine, token, ',')) {
>             if (token[0] == ' ') // Remove beginning space.
339,350c310,321
<           if(idx == -1)
<           {
<             cerr << "ERROR: Comedy Movie: " << title << ", " << year << " Not Found!" << endl;
<           }
<           else
<           {
<             if(customerDatabase.contains(custID))
<             {
<               if(inv->borrowMovie(movieType, idx))
<               {
<                 ComedyMovie* c = inv->peekComedyMovie(idx);
<                 Transaction* t = new Transaction('C', c->getTitle(), c->getDirector(), customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
---
>           if (idx == -1) {
>             cerr << "ERROR: Comedy Movie: " << title << ", " << year
>                  << " Not Found!" << endl;
>           } else {
>             if (customerDatabase.contains(custID)) {
>               if (inv->borrowMovie(movieType, idx)) {
>                 ComedyMovie *c = inv->peekComedyMovie(idx);
>                 Transaction *t = new Transaction(
>                     'C', c->getTitle(), c->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
354,356c325
<             }
<             else 
<             {
---
>             } else {
360,363c329,330
<         }
<         else if(movieType == "D")
<         {
<           //D Barry Levinson, Good Morning Vietnam,
---
>         } else if (movieType == "D") {
>           // D Barry Levinson, Good Morning Vietnam,
367,368c334,335
<           while(getline(parseLine, token, ',')) {
<             if(token[0] == ' ') // Remove beginning space.
---
>           while (getline(parseLine, token, ',')) {
>             if (token[0] == ' ') // Remove beginning space.
377,388c344,355
<           if(idx == -1)
<           {
<             cerr << "ERROR: Drama Movie: " << title << " by " << director << " Not Found!" << endl;
<           }
<           else
<           {
<             if(customerDatabase.contains(custID))
<             {
<               if(inv->borrowMovie(movieType, idx))
<               {
<                 DramaMovie* c = inv->peekDramaMovie(idx);
<                 Transaction* t = new Transaction('C', c->getTitle(), c->getDirector(), customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
---
>           if (idx == -1) {
>             cerr << "ERROR: Drama Movie: " << title << " by " << director
>                  << " Not Found!" << endl;
>           } else {
>             if (customerDatabase.contains(custID)) {
>               if (inv->borrowMovie(movieType, idx)) {
>                 DramaMovie *c = inv->peekDramaMovie(idx);
>                 Transaction *t = new Transaction(
>                     'C', c->getTitle(), c->getDirector(),
>                     customerDatabase.get(custID)->getFirstName() + " " +
>                         customerDatabase.get(custID)->getLastName(),
>                     transType[0]);
392,394c359
<             }
<             else 
<             {
---
>             } else {
398,400c363
<         }
<         else
<         {
---
>         } else {
403,405c366
<       }
<       else
<       {
---
>       } else {
408c369
<      break;
---
>       break;
410c371
<     default: 
---
>     default:
418,419c379
< void Store::displayInventory()
< {
---
> void Store::displayInventory() {
Running clang-format on ./store_test.cpp
7a8,9
> #include <cassert>
> #include <fstream>
11,12d12
< #include <fstream>
< #include <cassert>
Running clang-format on ./Transaction.cpp
4,19c4,19
< Transaction::Transaction(const char& movType, const string& movTitle, const string& dirName, const string& customerName, const char& type)
< {
<   switch(movType)
<   {
<     case 'F' : 
<       movieType = "Comedy";
<       break;
<     case 'C' :
<       movieType = "Classic";
<       break;
<     case 'D' :
<       movieType = "Drama";
<       break;
<     default:
<       cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
<       break;
---
> Transaction::Transaction(const char &movType, const string &movTitle,
>                          const string &dirName, const string &customerName,
>                          const char &type) {
>   switch (movType) {
>   case 'F':
>     movieType = "Comedy";
>     break;
>   case 'C':
>     movieType = "Classic";
>     break;
>   case 'D':
>     movieType = "Drama";
>     break;
>   default:
>     cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
>     break;
24,25c24
<   if(type == 'B')
<   {
---
>   if (type == 'B') {
27,29c26
<   }
<   else if(type == 'R')
<   {
---
>   } else if (type == 'R') {
34,37c31
< Transaction::~Transaction()
< {
<   
< }
\ No newline at end of file
---
> Transaction::~Transaction() {}
\ No newline at end of file
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==25461== Memcheck, a memory error detector
==25461== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==25461== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==25461== Command: ./a.out
==25461== Parent PID: 25168
==25461== 
==25461== 
==25461== HEAP SUMMARY:
==25461==     in use at exit: 14,383 bytes in 160 blocks
==25461==   total heap usage: 3,136 allocs, 2,976 frees, 195,172 bytes allocated
==25461== 
==25461== LEAK SUMMARY:
==25461==    definitely lost: 1,512 bytes in 13 blocks
==25461==    indirectly lost: 12,871 bytes in 147 blocks
==25461==      possibly lost: 0 bytes in 0 blocks
==25461==    still reachable: 0 bytes in 0 blocks
==25461==         suppressed: 0 bytes in 0 blocks
==25461== Rerun with --leak-check=full to see details of leaked memory
==25461== 
==25461== For lists of detected and suppressed errors, rerun with: -s
==25461== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/schau623/2021wi343b-movie-schau623/Customer.cpp':
Name                                                Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------------------------------
Customer::Customer(std::string, std::string, int)         1       0 100.00%         5       0 100.00%
Customer::~Customer()                                     1       1   0.00%         3       3   0.00%
Customer::addToHistory(Transaction*)                      1       0 100.00%         3       0 100.00%
Customer::getFirstName() const                            1       0 100.00%         3       0 100.00%
Customer::getLastName() const                             1       0 100.00%         3       0 100.00%
Customer::getCustomerID() const                           1       1   0.00%         3       3   0.00%
Customer::printHistory()                                  7       0 100.00%        15       0 100.00%
Customer::addBorrowed(char, int)                          1       0 100.00%         3       0 100.00%
Customer::returnADVD(char, int)                           8       8   0.00%        10      10   0.00%
Customer::isCurrentlyBorrowing(char, int)                 1       0 100.00%         3       0 100.00%
-----------------------------------------------------------------------------------------------------
TOTAL                                                    23      10  56.52%        51      16  68.63%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Inventory.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Inventory::Inventory()                                                                                                                                 1       0 100.00%         3       0 100.00%
Inventory::~Inventory()                                                                                                                                1       1   0.00%         3       3   0.00%
Inventory::addDramaMovie(int const&, std::string const&, std::string const&, int const&)                                                               5       1  80.00%        12       4  66.67%
Inventory::addComedyMovie(int const&, std::string const&, std::string const&, int const&)                                                              5       1  80.00%        12       4  66.67%
Inventory::addClassicMovie(int const&, std::string const&, std::string const&, std::string const&, std::string const&, int const&, int const&)         5       1  80.00%        12       4  66.67%
Inventory::peekClassicMovie(int const&) const                                                                                                          6       1  83.33%         8       4  50.00%
Inventory::peekComedyMovie(int const&) const                                                                                                           6       1  83.33%         8       4  50.00%
Inventory::peekDramaMovie(int const&) const                                                                                                            6       1  83.33%         8       4  50.00%
Inventory::getClassicIndex(int const&, int const&, std::string const&, std::string const&)                                                            13       1  92.31%        13       0 100.00%
Inventory::getComedyIndex(int const&, std::string const&)                                                                                              9       0 100.00%        10       0 100.00%
Inventory::getDramaIndex(std::string const&, std::string const&)                                                                                       9       0 100.00%        10       0 100.00%
Inventory::borrowMovie(std::string const&, int const&)                                                                                                19       3  84.21%        48      13  72.92%
Inventory::returnMovie(std::string const&, int const&)                                                                                                 7       1  85.71%        17       4  76.47%
Inventory::sortByDrama(DramaMovie*, DramaMovie*)                                                                                                       1       0 100.00%         3       0 100.00%
Inventory::sortByComedy(ComedyMovie*, ComedyMovie*)                                                                                                    1       0 100.00%         3       0 100.00%
Inventory::sortByClassic(ClassicMovie*, ClassicMovie*)                                                                                                 1       0 100.00%         3       0 100.00%
Inventory::sortMovies()                                                                                                                                1       0 100.00%         6       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                 96      12  87.50%       179      44  75.42%

File '/home/NETID/schau623/2021wi343b-movie-schau623/main.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
main                                                                                                                                                   1       0 100.00%        20       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                  1       0 100.00%        20       0 100.00%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Store.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Store::Store()                                                                                                                                         1       0 100.00%         3       0 100.00%
Store::fillCustomerDatabase(std::string const&)                                                                                                        8       1  87.50%        25       3  88.00%
Store::stockDVDShelves(std::string const&)                                                                                                            23       1  95.65%        59       3  94.92%
Store::readTransactions(std::string const&)                                                                                                          105      28  73.33%       316      90  71.52%
Store::displayInventory()                                                                                                                              1       0 100.00%         4       0 100.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                138      30  78.26%       407      96  76.41%

File '/home/NETID/schau623/2021wi343b-movie-schau623/store_test.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
testStore1()                                                                                                                                           3       3   0.00%        19      19   0.00%
testStore2()                                                                                                                                           1       1   0.00%         4       4   0.00%
testStoreFinal()                                                                                                                                       1       1   0.00%         6       6   0.00%
testAll()                                                                                                                                              1       1   0.00%         5       5   0.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                  6       6   0.00%        34      34   0.00%

File '/home/NETID/schau623/2021wi343b-movie-schau623/Transaction.cpp':
Name                                                                                                                                             Regions    Miss   Cover     Lines    Miss   Cover
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Transaction::Transaction(char const&, std::string const&, std::string const&, std::string const&, char const&)                                        11       2  81.82%        28       4  85.71%
Transaction::~Transaction()                                                                                                                            1       1   0.00%         3       3   0.00%
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                                 12       3  75.00%        31       7  77.42%
=====================================================
The lines below were never executed
=====================================================
   79|      0|    {
   80|      0|      if(equals(other))
   81|      0|      {
   82|      0|        return false;
   83|      0|      }
   84|      0|      return (!lessThan(other));
   85|      0|    }
   93|      0|      {
   94|      0|        return false;
   95|      0|      }
  113|      0|          {
  114|      0|            if(m.getMajorActorLast() > majorActorLast)
  115|      0|            {
  116|      0|              return true;
  117|      0|            }
  118|      0|            else
  119|      0|            {
  120|      0|              return false;
  121|      0|            }
   40|      0|    {
   41|      0|      return (!lessThan(m));
   42|      0|    }
   47|      0|      {
   48|      0|        return false;
   49|      0|      }
   10|      0|{
   11|      0|  
   12|      0|}
   29|      0|{
   30|      0|  return customerID;
   31|      0|}
   56|      0|{
   57|      0|  for(int i = 0; i < borrowedMovies.size(); i++)
   58|      0|  {
   59|      0|    if(borrowedMovies[i].first == movieType && borrowedMovies[i].second == movieIndex)
   60|      0|    {
   61|      0|      borrowedMovies.erase(borrowedMovies.begin()+i);
   62|      0|      return;
   63|      0|    }
   64|      0|  }
   65|      0| }
   41|      0|    {
   42|      0|      return (!lessThan(m));
   43|      0|    }
   48|      0|      {
   49|      0|        return false;
   50|      0|      }
   58|      0|        {
   59|      0|          return true;
   60|      0|        }
   29|      0|      {
   30|      0|        int index = getIndex(key);  // We get the key's index, and update the value for that key.
   31|      0|        values[index] = value;
   32|      0|      }
   83|      0|        return -1;
   84|      0|      }
    7|      0|{
    8|      0|  
    9|      0|}
   17|      0|    {
   18|      0|      i->setStock(d->getStockAmt()+i->getStockAmt());
   19|      0|      return;
   20|      0|    }
   31|      0|    {
   32|      0|      i->setStock(f->getStockAmt()+i->getStockAmt());
   33|      0|      return;
   34|      0|    }
   45|      0|    {
   46|      0|      i->setStock(c->getStockAmt()+i->getStockAmt());
   47|      0|      return;
   48|      0|    }
   57|      0|  {
   58|      0|    cerr << "ERROR: Index exceeds ClassicMovieShelf size" << endl;
   59|      0|    return nullptr;
   60|      0|  }
   67|      0|  {
   68|      0|    cerr << "ERROR: Index exceeds ComedyMovieShelf size" << endl;
   69|      0|    return nullptr;
   70|      0|  }
   77|      0|  {
   78|      0|    cerr << "ERROR: Index exceeds DramaMovieShelf size" << endl;
   79|      0|    return nullptr;
   80|      0|  }
  149|      0|    else
  150|      0|    {
  151|      0|      cerr << "ERROR: Insufficient stock of " << comedyMovieShelf[index]->getTitle() << ", " << comedyMovieShelf[index]->getReleaseYear() << endl;
  152|      0|      return false;
  153|      0|    }
  164|      0|    else
  165|      0|    {
  166|      0|      cerr << "ERROR: Insufficient stock of " << dramaMovieShelf[index]->getTitle() << ", " << dramaMovieShelf[index]->getReleaseYear() << endl;
  167|      0|      return false;
  168|      0|    }
  169|      0|  }
  170|      0|  return false;
  171|      0|}
  186|      0|  {
  187|      0|    dramaMovieShelf[index]->setStock(dramaMovieShelf[index]->getStockAmt()+1);
  188|      0|    dramaMovieShelf[index]->setBorrowed(dramaMovieShelf[index]->getBorrowedAmt()-1);
  189|      0|  }
   17|      0|	{
   18|      0|		cout << "Can't open file" << endl;
   19|      0|	}
   44|      0|	{
   45|      0|		cout << "Can't open file" << endl;
   46|      0|	}
  105|      0|	{
  106|      0|		cout << "Can't open file" << endl;
  107|      0|	}
  153|      0|          {
  154|      0|            cerr << "ERROR: Classic Movie Not Found!" << endl;
  155|      0|          }
  169|      0|                else
  170|      0|                {
  171|      0|                  cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
  172|      0|                  << " is not currently borrowing the classic movie " << c->getTitle() << ", " << c->getDirector() << ", so we can't return it." << endl;
  173|      0|                }
  175|      0|              else  // Otherwise, the customer doesn't exist. Throw an error. 
  176|      0|              {
  177|      0|                cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  178|      0|              }
  199|      0|            {
  200|      0|              cerr << "ERROR: Comedy Movie: " << title << ", " << year << " Not Found!" << endl;
  201|      0|            }
  214|      0|                else
  215|      0|                {
  216|      0|                  cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
  217|      0|                  << " is not currently borrowing the comedy movie " << c->getTitle() << ", " << c->getDirector() << ", so we can't return it." << endl;
  218|      0|                }
  220|      0|              else // otherwise error for non-existent ID.
  221|      0|              {
  222|      0|                cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  223|      0|              }
  226|      0|          else if(movieType == "D")
  227|      0|          {
  228|      0|            //D Barry Levinson, Good Morning Vietnam,
  229|      0|            string director, title;
  230|      0|            string token;
  231|      0|            vector<string> tokens;
  232|      0|            while(getline(parseLine, token, ',')) {
  233|      0|              if(token[0] == ' ') // Remove beginning space.
  234|      0|              {
  235|      0|                token.erase(0, 1);
  236|      0|              }
  237|      0|              tokens.push_back(token);
  238|      0|            }
  239|      0|            director = tokens[0];
  240|      0|            title = tokens[1];
  241|      0|            int idx = inv->getDramaIndex(director, title);
  242|      0|            if(idx == -1) // If movie not found throw error
  243|      0|            {
  244|      0|              cerr << "ERROR: Drama Movie: " << title << " by " << director << " Not Found!" << endl;
  245|      0|            }
  246|      0|            else  // Otherwise movie exists, continue
  247|      0|            {
  248|      0|              DramaMovie* d = inv->peekDramaMovie(idx);
  249|      0|              if(customerDatabase.contains(custID)) // if customer exists, continue
  250|      0|              {
  251|      0|                if(customerDatabase.get(custID)->isCurrentlyBorrowing('D', idx))
  252|      0|                {
  253|      0|                  inv->returnMovie(movieType, idx);
  254|      0|                  Transaction* t = new Transaction('D', d->getTitle(), d->getDirector(), customerDatabase.get(custID)->getFirstName() + " " + customerDatabase.get(custID)->getLastName(), transType[0]);
  255|      0|
  256|      0|                  customerDatabase.get(custID)->addToHistory(t);
  257|      0|                }
  258|      0|                else
  259|      0|                {
  260|      0|                  cerr << "ERROR: " << customerDatabase.get(custID)->getFirstName() << " " << customerDatabase.get(custID)->getLastName()
  261|      0|                  << " is not currently borrowing the drama movie " << d->getTitle() << ", " << d->getDirector() << ", so we can't return it." << endl;
  262|      0|                }
  263|      0|              }
  264|      0|              else // throw error for non existing customer
  265|      0|              {
  266|      0|                cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  267|      0|              }
  268|      0|            }
  269|      0|        }
  270|      0|        else
  271|      0|        {
  272|      0|          cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
  273|      0|        }  
  275|      0|      else
  276|      0|      {
  277|      0|        cerr << "ERROR: Invalid Media Type:" << mediaType << endl;
  278|      0|      }  
  301|      0|          {
  302|      0|            cerr << "ERROR: Classic Movie Not Found!" << endl;
  303|      0|          }
  355|      0|            else 
  356|      0|            {
  357|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  358|      0|            }
  393|      0|            else 
  394|      0|            {
  395|      0|              cerr << "ERROR: Invalid Customer ID: " << custID << endl;
  396|      0|            }
   15|      0|      movieType = "Drama";
   16|      0|      break;
   18|      0|      cerr << "ERROR: Invalid Movie Type: " << movieType << endl;
   19|      0|      break;
   35|      0|{
   36|      0|  
   37|      0|}
   16|      0|void testStore1() {
   17|      0|  cout << "Start testStore1" << endl;
   18|      0|  // Should do something more, but lets just read files
   19|      0|  // since each implementation will
   20|      0|  string cfile = "testcommands-1.txt";
   21|      0|  stringstream out;
   22|      0|  ifstream fs(cfile);
   23|      0|  assert(fs.is_open());
   24|      0|  char commandType;
   25|      0|  string discard;
   26|      0|  while (fs >> commandType) {
   27|      0|    out << commandType;
   28|      0|    getline(fs, discard);
   29|      0|  }
   30|      0|  fs.close();
   31|      0|  string result = "IHHBRIBBIH";
   32|      0|  assert(out.str() == result);
   33|      0|  cout << "End testStore1" << endl;
   34|      0|}
   36|      0|void testStore2() {
   37|      0|  cout << "Start testStore2" << endl;
   38|      0|  cout << "End testStore2" << endl;
   39|      0|}
   41|      0|void testStoreFinal() {
   42|      0|  cout << "=====================================" << endl;
   43|      0|  cout << "Start testStoreFinal" << endl;
   44|      0|  cout << "End testStoreFinal" << endl;
   45|      0|  cout << "=====================================" << endl;
   46|      0|}
   48|      0|void testAll() {
   49|      0|  testStore1();
   50|      0|  testStore2();
   51|      0|  testStoreFinal();
   52|      0|}
Sun Mar 14 01:34:08 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
